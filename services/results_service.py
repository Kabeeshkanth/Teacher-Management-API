from typing import Dict, Any
from uuid import UUID
import logging
from fastapi import HTTPException, status
from utils.database import get_supabase_client
from utils.auth import verify_teacher_exists
from models.schema import Grade

logger = logging.getLogger(__name__)


def upload_results_logic(
        teacher_id: str,
        course_id: int,
        assignment_title: str,
        student_id: UUID,
        result: Grade
) -> Dict[str, Any]:
    """
    Upload results with validation and auto-population:

    Validations (4 required conditions):
    - Teacher exists in teachers table
    - Course exists in course table
    - Student exists in students table
    - Grade is valid enum (A, B, C, FAIL)

    Auto-populated fields (3 fields):
    - assignment_id (fetched from assignments table)
    - student_name (fetched from students table)
    - result_id (auto-generated by database)
    """
    # 1. Verify teacher exists
    verify_teacher_exists(teacher_id)

    supabase = get_supabase_client()

    # 2. Verify course exists
    try:
        course_resp = supabase.table("course").select("course_id").eq("course_id", course_id).execute()

        if getattr(course_resp, "error", None):
            logger.error("DB error checking course: %s", course_resp.error)
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="DB error checking course"
            )

        if not course_resp.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Course not found"
            )
    except HTTPException:
        raise
    except Exception as exc:
        logger.exception("Error verifying course")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to verify course: {str(exc)}"
        )

    # 3. Verify student exists and fetch student_name
    try:
        student_resp = supabase.table("students").select("id, name").eq("id", str(student_id)).execute()

        if getattr(student_resp, "error", None):
            logger.error("DB error checking student: %s", student_resp.error)
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="DB error checking student"
            )

        if not student_resp.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Student with ID {student_id} not found"
            )

        student_name = student_resp.data[0]["name"]

    except HTTPException:
        raise
    except Exception as exc:
        logger.exception("Error verifying student")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to verify student: {str(exc)}"
        )

    # Fetch assignment_id from assignment_title
    try:
        assignment_resp = supabase.table("assignments") \
            .select("assignment_id") \
            .eq("assignment_title", assignment_title) \
            .eq("course_id", course_id) \
            .execute()

        if getattr(assignment_resp, "error", None):
            logger.error("DB error fetching assignment: %s", assignment_resp.error)
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="DB error fetching assignment"
            )

        if not assignment_resp.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Assignment with title '{assignment_title}' not found in course {course_id}"
            )

        assignment_id = assignment_resp.data[0]["assignment_id"]

    except HTTPException:
        raise
    except Exception as exc:
        logger.exception("Error fetching assignment")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to fetch assignment: {str(exc)}"
        )

    # Prepare payload with auto-populated fields
    payload = {
        "course_id": course_id,
        "assignment_id": assignment_id,
        "assignment_title": assignment_title,
        "student_id": str(student_id),
        "student_name": student_name,
        "result": result.value
    }

    # Insert result (result_id auto-generated by database)
    try:
        # Fixed: insert() returns data directly, no .select() needed
        resp = supabase.table("results").insert(payload).execute()

        if getattr(resp, "error", None):
            logger.error("Supabase insert error: %s", resp.error)
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to save result"
            )

        data = getattr(resp, "data", None)
        if not data or len(data) == 0:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="No result returned from database"
            )

        return data[0]

    except HTTPException:
        raise
    except Exception as exc:
        logger.exception("Unexpected error inserting result")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(exc)
        )
